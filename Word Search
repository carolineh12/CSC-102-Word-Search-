##########################################
#Program 1: Word Search
#Caroline Holland and Liz Denson
#February 6, 2023 
##########################################
class Grid:
    def __init__(self, s, g, w):
        self.size = s
        self.grid = g
        self.words = w
    @property 
    def size(self): 
        return self._size
    @size.setter
    def size(self,s):
        self._size = s
    @property 
    def grid(self): 
        return self._grid
    @grid.setter
    def grid(self,g):
        self._grid = g
    @property 
    def words(self): 
        return self._words
    @words.setter
    def words(self,w):
        self._words = w
        
    ####OTHER METHODS
    def position(self):
        pass
    def print_words(self):
        pass
    def print_solution(self):
        pass
    def __str__(self):
        pass
            
#Import Debug.py library to appropriately utilize the DEBUG variable
from Debug import DEBUG

#Word class
class Word():
#Deleted Grid within the class Word parameters for now

    #Orientations stored in a list through a class variable called ORIENTATIONS
    ORIENTATIONS = ["HR", "HL", "VD", "VU", "DRD", "DRU", "DLD", "DLU"]
    
    #The constructor which takes a word, an orientation, and a location as parameters
    def __init__(self, word, orientation=None, location=None):
        self.word = word.upper()
        self.orientation = orientation
        self.location = location
        
    #Getters and setters for the instance variables _word, _orientation, and _location
    @property 
    def word(self): 
        return self._word
    @word.setter
    def word(self, word):
        self._word = word.upper()
    @property 
    def orientation(self): 
        return self._orientation
    @orientation.setter
    def orientation(self, orientation):
        self._orientation = orientation
    @property 
    def location(self): 
        return self._location
    @location.setter
    def location(self, location):
        self._location = location
    
    #A __str__() method that returns a string representation of the Word in two formats
    def __str__(self):
        if DEBUG == False:
            return self.word.upper()
        else:
            return "{}/{}@{}".format(self.word, self.orientation, self.location)

#Location Class
class Location():
#Deleted Word within the class Word parameters for now
    #constructor; row and col set to 0
    def __init__(self, row=0, col=0):
        self.row = row
        self.col = col
    
    #getters and setters
    @property 
    def row(self): 
        return self._row
    @row.setter
    def row(self, row):
        #change negative values to 0
        if row < 0:
            self._row = 0
        else:
            self._row = row
    @property 
    def col(self): 
        return self._col
    @col.setter
    def col(self, col):
        #change negative values to 0
        if col < 0:
            self._col = 0
        else:
            self._col = col
         
  #OTHER METHODS   
    def __str__(self):
        return("({},{})".format(self.row, self.col))

#####MAIN PROGRAM#####

    
