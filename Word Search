##########################################
#Program 1: Word Search
#Caroline Holland and Liz Denson
#February 6, 2023 
##########################################
class Grid:
    def __init__(self, s, g, w):
        self.size = s
        self.grid = g
        self.words = w
    @property 
    def size(self): 
        return self._size
    @size.setter
    def size(self,s):
        self._size = s
    @property 
    def grid(self): 
        return self._grid
    @grid.setter
    def grid(self,g):
        self._grid = g
    @property 
    def words(self): 
        return self._words
    @words.setter
    def words(self,w):
        self._words = w
        
    ####OTHER METHODS
    def position(self):
        pass
    def print_words(self):
        pass
    def print_solution(self):
        pass
    def __str__(self):
        pass
            
#import Debug file
from Debug import DEBUG

#Word class
class Word(Grid):
    #class variable
    ORIENTATIONS = ["HR", "HL", "VD", "VU", "DRD", "DRU", "DLD", "DLU"]
    #from Debug import DEBUG ----> When I try this it says it can't find Debug
    
    def __init__(self, word, orientation=None, location=None):
        #super().__init__(s, g, w) #good when dealing with multiple inheritants and don't know which is the parent
        self._word = word.upper()
        self._orientation = orientation
        self._location = location
    @property 
    def word(self): 
        return self._word
    @word.setter
    def word(self, word):
        self._word = word.upper()
    @property 
    def orientation(self): 
        return self._orientation
    @orientation.setter
    def orientation(self, orientation):
        self._orientation = orientation
    @property 
    def location(self): 
        return self._location
    @location.setter
    def location(self, location):
        self._location = location
    
    ####OTHER METHODS
    def __str__(self):
        if DEBUG == False:
            return self.word.upper()
        else:
            return "{}/{}@{}".format(self.word, self.orientation, self.location)

class Location(Word):
    def __init__(self, row=0, col=0):
        self.row = row
        self.col = col
    @property 
    def row(self): 
        return self._row
    @row.setter
    def row(self, row):
        if row < 0:
            self._row = 0
        else:
            self._row = row
    @property 
    def col(self): 
        return self._col
    @col.setter
    def col(self, col):
        if col < 0:
            self._col = 0
        else:
            self._col = col
        #if neg values, set default to 0; not sure if to add that here
         
  ####OTHER METHODS   
    def __str__(self):
        return("({},{})".format(self.row, self.col))

#class WordSearch(Word): #not sure if the inheritant function is correct 
    # import libraries
    #from Location import Location
    #from Word import Word
    #from sys import stdin
    #from random import sample, choice, randint

    # define constants
    #NUM_WORDS = 15  # how many words to randomly select from the input
    #GRID_SIZE = 25  # the height/width of the "fictitious" grid 


#####MAIN PROGRAM#####

    
